import mongoose, { Schema } from "mongoose";
import jwt from "jsonwebtoken"
import bcrypt from "bcrypt"


const userSchema = new Schema({
  userName: { 
    type: String,
    required: true 
  },
  email: { 
    type: String, 
    required: true,
    unique: true 
  },
  fullName:{
    type:String,
    required:true
  },
  password: { 
    type: String,
    required: true 
  },
  events: [
    {
      type: Schema.Types.ObjectId,
      ref: "Event"
    }
  ],
  clubs: [
    {
      type: Schema.Types.ObjectId,
      ref: "Club"
    }
  ],
  transactions: [
    {
      type: Schema.Types.ObjectId,
      ref: "Transaction"
    }
  ],
  year: { 
    type: Number, 
    enum:[1,2,3,4],
    required: true 
  },
  branch: { 
    type: String,
    required: true 
  },
  totalActivityPoints: {
    type: String,
    default: 0 
  },
  role:{
    type:String,
    enum:["president","user"],
    required:true
  },
  refreshToken:{
    type:String,

  }
}, { timestamps: true });



userSchema.pre("save",async function(next){
    if(!(this.isModified("password"))){
        return next;
    }
    this.password=await bcrypt.hash(this.password,10)
    next();
})


userSchema.methods.isPasswordCorrect = async function(password) {
    return await bcrypt.compare(password, this.password); // Compare the password
  };








userSchema.methods.generateAccessToken=function(){
    return jwt.sign(
        {
            //payloads or data

            //this id is generated by mongoose automaticcaly when data model is created
            //id is stored in mongoose by default
            _id:this._id,
            email:this.email,
            userName:this.userName,
            fullName:this.fullName
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            expiresIn:process.env.ACCESS_TOKEN_EXPIRY
        }
    )
}
userSchema.methods.generateRefreshToken=function(){
    return jwt.sign(
        {
            //payloads or data

            //this id is generated by mongoose automaticcaly when data model is created
            //id is stored in mongoose by default
            _id:this._id,
            email:this.email,
            userName:this.userName,
            fullName:this.fullName
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            expiresIn:process.env.REFRESH_TOKEN_EXPIRY
        }
    )
}

export const User = mongoose.model("User", userSchema);
